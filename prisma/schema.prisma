// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  Id               Int      @id @default(autoincrement())
  Email            String   @db.VarChar(100) @unique
  Name             String?  @db.VarChar(100)
  Role             Role     @default(USER)
  CreatedAt        DateTime @default(now())
  Password         String   @db.VarChar(255)
  ProductsByAdmins Products[]
  BrandsByAdmins   Brands[]
  UserCart         Cart[]
  UserPurchases    Purchases[]
  Comments         Comments[]
  Votes            Votes[]
}


model Cart {
    Id        Int           @id @default(autoincrement())
    Product   Products      @relation(fields: [ProductId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
    ProductId Int
    User      Users         @relation(fields: [UserEmail], references: [Email], onDelete: Cascade, onUpdate: Cascade)
    UserEmail String
    Count     Int           @default(1)
}

model Purchases {
  Id        Int      @id @default(autoincrement())
  Product   Products @relation(fields: [ProductId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  ProductId Int
  User      Users    @relation(fields: [UserEmail], references: [Email], onDelete: Cascade, onUpdate: Cascade)
  UserEmail String
  Count     Int      @default(1)
  Address   String   @db.VarChar(255)
}


model Products {
    Id          Int      @id @default(autoincrement())
    Brand       Brands   @relation(fields: [BrandName], references: [Name], onDelete: Cascade, onUpdate: Cascade)
    BrandName   String
    Name        String   @db.VarChar(200)
    Description String   @db.VarChar(1000)
    Info        Json     @db.Json()
    Remaining   Int
    Price       Int
    CreatedAt   DateTime @default(now())
    Admin       Users    @relation(fields: [CreatedBy], references: [Email], onDelete: Cascade, onUpdate: Cascade)
    CreatedBy   String
    Cart        Cart[]
    Purchases   Purchases[]
    Comments    Comments[]
    Votes       Votes[]
}


model Brands {
  Name         String   @id @db.VarChar(50)
  BrandDetails String   @db.VarChar(255)
  CreatedAt    DateTime @default(now())
  Admin        Users    @relation(fields: [CreatedBy], references: [Email], onDelete: Cascade, onUpdate: Cascade)
  CreatedBy    String
  Products     Products[]
}

model Comments {
  Id        Int          @id @default(autoincrement())
  Product   Products     @relation(fields: [ProductId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  ProductId Int    
  User      Users        @relation(fields: [UserEmail], references: [Email], onDelete: Cascade, onUpdate: Cascade)
  UserEmail String     
  Date      DateTime     @default(now())
  Text      String       @db.VarChar(1000)
  Stage     CommentStage @default(Proccessing)
  Votes     Votes[]
}

model Votes {
  Id        Int      @id @default(autoincrement())
  User      Users    @relation(fields: [UserEmail], references: [Email], onDelete: Cascade, onUpdate: Cascade)
  UserEmail String
  Products  Products @relation(fields: [ProductId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  ProductId Int
  Comment   Comments @relation(fields: [CommentId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  CommentId Int
  Type      VoteType
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum VoteType {
  LIKE
  DISLIKE
}

enum CommentStage {
  Proccessing
  Rejected
  Accepted
}